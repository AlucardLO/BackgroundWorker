<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<!-- Required Sections -->
		<!-- Sections used by common.logging and nlog. If you don't use nlog, you can rip that one out -->
		<sectionGroup name="common">
			<section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" />
		</sectionGroup>
		<!-- This tells .net framework that the section specified by name is required somewhere in the configuration file. -->
		<section name="BackgroundWorkerService.Logic.Configuration.ConfigSetupConfigurationSection" type="BackgroundWorkerService.Logic.Configuration.ConfigSetupConfigurationSection, BackgroundWorkerService.Logic" />
		<section name="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider" type="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider, BackgroundWorkerService.Logic" />
		<section name="BackgroundWorkerService.Service.Configuration.WebServerConfiguration" type="BackgroundWorkerService.Service.Configuration.WebServerConfiguration, BackgroundWorkerService.HostedLogic" />
		<!-- End Required Sections-->
		<!-- This is only required if using the Linq2Sql Job store -->
		<!--<section name="BackgroundWorkerService.Logic.Configuration.Linq2SqlJobStoreConfigurationSection" type="BackgroundWorkerService.Logic.Configuration.Linq2SqlJobStoreConfigurationSection, BackgroundWorkerService.Logic" />-->
		<!-- This is only required if using the Ram Job store and you want custom settings -->
		<section name="BackgroundWorkerService.Logic.Configuration.RamJobStoreConfigurationSection" type="BackgroundWorkerService.Logic.Configuration.RamJobStoreConfigurationSection, BackgroundWorkerService.Logic" />
	</configSections>
	<!-- This section configures the built in webserver options. See configsection for more information and defaults. -->
	<BackgroundWorkerService.Service.Configuration.WebServerConfiguration Enabled="true" />
	<!-- Specify the object that implements ISettingsProvider.  In this case, it will be an instance of 'BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider'. -->
	<!-- 'BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider' requires the providerSectionName which it will load the settings from. -->
	<BackgroundWorkerService.Logic.Configuration.ConfigSetupConfigurationSection type="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider, BackgroundWorkerService.Logic" providerSectionName="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider" />
	<!-- The default 'BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider' implementation as specified above uses this section. -->
	<!-- If you don't specify this service instanceName, the machine name is used. -->
	<BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider PollFrequency="00:00:00.100" ShutdownTimeout="00:01:00" InstanceName="">
		<!-- Tell the service which job store to use.  -->
		<!-- 'settingsProviderType' is the object that provides the jobstore with it's settings. (This is seperate from the service settings) -->
		<!-- Use this section only if you want to use the Linq2Sql job store with the config section lower down to get the settings from. -->
		<!--<JobStore type="BackgroundWorkerService.Logic.Implementation.JobStore.Linq2Sql.Linq2SqlJobStore, BackgroundWorkerService.Logic" settingsProviderType="BackgroundWorkerService.Logic.Implementation.Internal.Providers.ConfigLinq2SqlJobStoreSettingsProvider, BackgroundWorkerService.Logic" />-->
		<!-- Use this section only if you want to use the RamJobStore (if there's no JobStore node, RamJobStore is used with default settings) -->
		<JobStore type="BackgroundWorkerService.Logic.Implementation.JobStore.RamJobStore, BackgroundWorkerService.Logic" settingsProviderType="BackgroundWorkerService.Logic.Implementation.Internal.Providers.ConfigRamJobsStoreSettingsProvider, BackgroundWorkerService.Logic" />
		<Queues>
			<!-- Add queues with non duplicate positive byte id's. 0-255 and specify the type of queue and max threads in each queue. -->
			<!-- Note that the default UI relies on the queues as below (not the ThreadCounts though).  If you change the order or types of these, you have to change the UI as well. -->
			<Queue Id="0" ThreadCount="50" type="BackgroundWorkerService.Logic.Implementation.Internal.ThreadExecutionQueue, BackgroundWorkerService.Logic" />
			<Queue Id="1" ThreadCount="20" type="BackgroundWorkerService.Logic.Implementation.Internal.ThreadPoolExecutionQueue, BackgroundWorkerService.Logic" />
			<Queue Id="2" ThreadCount="50" type="BackgroundWorkerService.Logic.Implementation.Internal.TimedThreadExecutionQueue, BackgroundWorkerService.Logic" />
		</Queues>
	</BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider>
	<!-- This section is used by the Linq2SqlJobStore.  It provides the NAME of the connectionstring to use (specified in 'connectionStrings' section). -->
	<!-- This allows standard sharing of connectionstring settings. -->
	<!--<BackgroundWorkerService.Logic.Configuration.Linq2SqlJobStoreConfigurationSection connectionStringName="BackgroundWorkerConnectionString" />-->
	<!-- This section is used by the RamJobStore.  If you're not using the RamJobStore or you just want to use the default values, this can be removed. -->
	<BackgroundWorkerService.Logic.Configuration.RamJobStoreConfigurationSection maxHistoryRecords="10000" />
	<connectionStrings>
		<add name="BackgroundWorkerConnectionString" connectionString="Data Source=DEVSQL2008;Initial Catalog=BackgroundWorkerService;Integrated Security=True" providerName="System.Data.SqlClient" />
	</connectionStrings>
	<!-- This is the standard .net mail settings. It's not required for the service, but makes BackgroundWorkerService.Jobs.SendMailJob required less metadata. -->
	<system.net>
		<mailSettings>
			<smtp deliveryMethod="Network" from="">
				<network host="" port="25" />
			</smtp>
		</mailSettings>
		<!-- This tells the service point manager that this service is allowed to open 100 connections to each remote host. By default it's 2, so you might want to consider performance issues here. -->
		<connectionManagement>
			<add address="*" maxconnection="100" />
		</connectionManagement>
	</system.net>
	<!-- This is where we configure our wcf access point.  You can basically do what you like in terms of protocol/ports/security etc, just use contract="BackgroundWorkerService.Service.Admin.IAccessPoint" -->
	<system.serviceModel>
		<bindings>
			<!-- Use defaults for xml payload sizes and connection timeouts. This section can be removed, but it's left here to easily add readerquotas later. -->
			<basicHttpBinding>
				<binding name="BasicHttpBinding" maxReceivedMessageSize="4194304" hostNameComparisonMode="Exact">
					<readerQuotas maxStringContentLength="4194304" />
				</binding>
			</basicHttpBinding>
		</bindings>
		<services>
			<service name="BackgroundWorkerService.Service.Admin.AccessPoint">
				<endpoint address="" binding="basicHttpBinding" contract="BackgroundWorkerService.Service.Admin.IAccessPoint" bindingConfiguration="BasicHttpBinding" ></endpoint>
			</service>
		</services>
		<behaviors>
			<serviceBehaviors>
				<behavior>
					<!-- Unless you're exposing this service out of your network, you can leave metadata and full exception trace on -->
					<serviceMetadata httpGetEnabled="true" />
					<serviceDebug includeExceptionDetailInFaults="true" />
				</behavior>
			</serviceBehaviors>
		</behaviors>
	</system.serviceModel>
	<!-- Common.Logging binding.  This is setup to use System.Diagnostics.Trace, but you can use any logging framework that has common.logging adapter -->
	<common>
		<logging>
			<factoryAdapter type="Common.Logging.Simple.TraceLoggerFactoryAdapter, Common.Logging">
			</factoryAdapter>
		</logging>
	</common>
	<system.diagnostics>
  <trace>
   <listeners>
    <add type="Microsoft.WindowsAzure.Diagnostics.DiagnosticMonitorTraceListener, Microsoft.WindowsAzure.Diagnostics, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
     name="AzureDiagnostics">
     <filter type="" />
    </add>
   </listeners>
  </trace>
 </system.diagnostics>
</configuration>
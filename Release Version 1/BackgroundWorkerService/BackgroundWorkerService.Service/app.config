<?xml version="1.0"?>
<configuration>
	<configSections>
		<!-- Required Sections -->
		<!-- This tells .net framework that the section specified by name is required somewhere in the configuration file. -->
		<section name="BackgroundWorkerService.Logic.Configuration.ConfigSetupConfigurationSection" type="BackgroundWorkerService.Logic.Configuration.ConfigSetupConfigurationSection, BackgroundWorkerService.Logic"/>
		<section name="BackgroundWorkerService.Logic.Configuration.LoggingProviderConfigurationSection" type="BackgroundWorkerService.Logic.Configuration.LoggingProviderConfigurationSection, BackgroundWorkerService.Logic"/>
		<section name="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider" type="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider, BackgroundWorkerService.Logic"/>
		<section name="BackgroundWorkerService.Service.Configuration.WebServerConfiguration" type="BackgroundWorkerService.Service.Configuration.WebServerConfiguration, BackgroundWorkerService.Service"/>
		<!-- End Required Sections-->
		<!-- This is only required if using the Linq2Sql Job store -->
		<!--<section name="BackgroundWorkerService.Logic.Configuration.Linq2SqlJobStoreConfigurationSection" type="BackgroundWorkerService.Logic.Configuration.Linq2SqlJobStoreConfigurationSection, BackgroundWorkerService.Logic"/>-->
	</configSections>
	<!-- This section configures the built in webserver options. See configsection for more information and defaults. -->
	<BackgroundWorkerService.Service.Configuration.WebServerConfiguration Enabled="true" />
	
	<!-- Specify the object that implements ISettingsProvider.  In this case, it will be an instance of 'BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider'. -->
	<!-- 'BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider' requires the providerSectionName which it will load the settings from. -->
	<!-- Other ISettingsProvider Implementations could simply ignore the providerSectionName. -->
	<BackgroundWorkerService.Logic.Configuration.ConfigSetupConfigurationSection type="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider, BackgroundWorkerService.Logic" providerSectionName="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider"/>
	<!-- The logging provider uses the same logic as the settings provider (Implementation of ILoggingProvider).  For simplicity, the settings and logging provider settings are contained in one config section. -->
	<BackgroundWorkerService.Logic.Configuration.LoggingProviderConfigurationSection type="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.EventLogLoggingProvider, BackgroundWorkerService.Logic" providerSectionName="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider" />
	<!-- The default 'BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider' and 'ILoggingProvider' implementation as specified above uses this section. -->
	<!-- If you don't specify this service instanceName, the machine name is used. -->
	<BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider PollFrequency="00:01:00.00" ShutdownTimeout="00:01:00" InstanceName="" EventLogSource="Background Worker Service">
		<!-- Tell the service which job store to use.  -->
		<!-- 'settingsProviderType' is the object that provides the jobstore with it's settings. (This is seperate from the service settings) -->
		<!--<JobStore type="BackgroundWorkerService.Logic.Implementation.JobStore.Linq2Sql.Linq2SqlJobStore, BackgroundWorkerService.Logic" settingsProviderType="BackgroundWorkerService.Logic.Implementation.Internal.Providers.Linq2SqlSettingsProvider, BackgroundWorkerService.Logic" />-->
		<Queues>
			<!-- Add queues with non duplicate positive byte id's. 0-255 and specify the type of queue and max threads in each queue. -->
			<Queue Id="0" ThreadCount="50" type="BackgroundWorkerService.Logic.Implementation.Internal.ThreadExecutionQueue, BackgroundWorkerService.Logic"/>
			<Queue Id="1" ThreadCount="20" type="BackgroundWorkerService.Logic.Implementation.Internal.ThreadPoolExecutionQueue, BackgroundWorkerService.Logic"/>
			<Queue Id="2" ThreadCount="50" type="BackgroundWorkerService.Logic.Implementation.Internal.TimedThreadExecutionQueue, BackgroundWorkerService.Logic" />
		</Queues>
	</BackgroundWorkerService.Logic.Implementation.Internal.Providers.Configuration.ConfigSettingsProvider>
	<!-- This section is used by the Linq2SqlJobStore.  It provides the NAME of the connectionstring to use (specified in 'connectionStrings' section). -->
	<!-- This allows standard sharing of connectionstring settings. -->
	<!--<BackgroundWorkerService.Logic.Configuration.Linq2SqlJobStoreConfigurationSection connectionStringName="BackgroundWorkerConnectionString" />-->
	<connectionStrings>
		<add name="BackgroundWorkerConnectionString"
				connectionString="Data Source=local;Initial Catalog=BackgroundWorker;Integrated Security=True"
				providerName="System.Data.SqlClient" />
	</connectionStrings>

	<!-- This is the standard .net mail settings. It's not required for the service, but makes BackgroundWorkerService.Jobs.SendMailJob required less metadata. -->
	<system.net>
		<mailSettings>
			<smtp deliveryMethod="Network" from="">
				<network host="" port="25"/>
			</smtp>
		</mailSettings>
	</system.net>
	
	<!-- This is where we configure our wcf access point.  You can basically do what you like in terms of protocol/ports/security etc, just use contract="BackgroundWorkerService.Service.Admin.IAccessPoint" -->
	<system.serviceModel>
		<bindings>
			<!-- Use defaults for xml payload sizes and connection timeouts. This section can be removed, but it's left here to easily add readerquotas later. -->
			<basicHttpBinding>
				<binding name="BasicHttpBinding" maxReceivedMessageSize="4194304">
					<readerQuotas maxStringContentLength="4194304" />
				</binding>
			</basicHttpBinding>
		</bindings>
		<services>
			<service name="BackgroundWorkerService.Service.Admin.AccessPoint">
				<host><!-- Could specify this in each endpoint, but this seems a bit cleaner -->
					<baseAddresses>
						<add baseAddress="http://localhost:7776/BackgroundWorkerService.Service"/>
					</baseAddresses>
				</host>
				<endpoint address="" 
									binding="basicHttpBinding" 
									contract="BackgroundWorkerService.Service.Admin.IAccessPoint" 
									bindingConfiguration="BasicHttpBinding"></endpoint>
			</service>
		</services>
		<behaviors>
			<serviceBehaviors>
				<behavior>
					<!-- Unless you're exposing this service out of your network, you can leave metadata and full exception trace on -->
					<serviceMetadata httpGetEnabled="true" />
					<serviceDebug includeExceptionDetailInFaults="true"/>
				</behavior>
			</serviceBehaviors>
		</behaviors>
	</system.serviceModel>
</configuration>